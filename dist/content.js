/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/content.css":
/*!*************************!*\
  !*** ./src/content.css ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://smart-reading-assistant/./src/content.css?");

/***/ }),

/***/ "./src/content.ts":
/*!************************!*\
  !*** ./src/content.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _services_VoiceService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./services/VoiceService */ \"./src/services/VoiceService.ts\");\n\nclass AIOverlay {\n    constructor() {\n        this.currentParagraph = null;\n        this.container = document.createElement('div');\n        this.container.className = 'reading-assistant-overlay';\n        this.injectStyles();\n        document.body.appendChild(this.container);\n        this.voiceService = new _services_VoiceService__WEBPACK_IMPORTED_MODULE_0__.VoiceService();\n    }\n    injectStyles() {\n        const styles = `\n      .reading-assistant-overlay {\n        position: fixed;\n        right: 20px;\n        top: 50%;\n        transform: translateY(-50%);\n        width: 320px;\n        background: white;\n        border-radius: 12px;\n        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n        z-index: 9999;\n        opacity: 0;\n        transition: opacity 0.3s ease;\n        font-family: -apple-system, BlinkMacSystemFont, sans-serif;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        .reading-assistant-overlay {\n          background: #1F2937;\n          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);\n        }\n      }\n\n      .reading-assistant-overlay.visible {\n        opacity: 1;\n      }\n\n      .overlay-header {\n        padding: 16px;\n        border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n      }\n\n      .overlay-content {\n        padding: 16px;\n      }\n\n      .overlay-actions {\n        display: flex;\n        gap: 8px;\n        margin-bottom: 16px;\n      }\n\n      .overlay-button {\n        flex: 1;\n        padding: 8px;\n        border: none;\n        border-radius: 6px;\n        background: #4F46E5;\n        color: white;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background 0.2s ease;\n      }\n\n      .overlay-button:hover {\n        background: #4338CA;\n      }\n\n      .overlay-section {\n        margin-bottom: 16px;\n      }\n\n      .overlay-section:last-child {\n        margin-bottom: 0;\n      }\n\n      .overlay-section h3 {\n        margin: 0 0 8px 0;\n        font-size: 14px;\n        color: #6B7280;\n      }\n\n      .overlay-section-content {\n        padding: 12px;\n        background: rgba(0, 0, 0, 0.05);\n        border-radius: 6px;\n        font-size: 14px;\n        line-height: 1.5;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        .overlay-section-content {\n          background: rgba(255, 255, 255, 0.05);\n        }\n      }\n\n      .loading {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        height: 100px;\n      }\n\n      .loading::after {\n        content: '';\n        width: 24px;\n        height: 24px;\n        border: 2px solid #4F46E5;\n        border-right-color: transparent;\n        border-radius: 50%;\n        animation: spin 0.8s linear infinite;\n      }\n\n      @keyframes spin {\n        to {\n          transform: rotate(360deg);\n        }\n      }\n\n      .overlay-button.reading {\n        background: #DC2626;\n      }\n\n      .overlay-button.reading:hover {\n        background: #B91C1C;\n      }\n    `;\n        const styleElement = document.createElement('style');\n        styleElement.textContent = styles;\n        document.head.appendChild(styleElement);\n    }\n    show(paragraph) {\n        this.currentParagraph = paragraph;\n        this.container.classList.add('visible');\n        this.render();\n    }\n    hide() {\n        this.container.classList.remove('visible');\n        this.currentParagraph = null;\n    }\n    async handleSummarize() {\n        if (!this.currentParagraph)\n            return;\n        const section = this.getOrCreateSection('summary', 'Summary');\n        section.classList.add('loading');\n        try {\n            const response = await chrome.runtime.sendMessage({\n                type: 'SUMMARIZE_PARAGRAPH',\n                text: this.currentParagraph.text\n            });\n            if (response.success) {\n                this.currentParagraph.summary = response.content;\n                this.render();\n            }\n            else {\n                throw new Error(response.error);\n            }\n        }\n        catch (error) {\n            section.textContent = `Error: ${error instanceof Error ? error.message : 'Failed to summarize'}`;\n        }\n        finally {\n            section.classList.remove('loading');\n        }\n    }\n    async handleTranslate() {\n        if (!this.currentParagraph)\n            return;\n        const section = this.getOrCreateSection('translation', 'Translation');\n        section.classList.add('loading');\n        try {\n            const response = await chrome.runtime.sendMessage({\n                type: 'TRANSLATE_PARAGRAPH',\n                text: this.currentParagraph.text\n            });\n            if (response.success) {\n                this.currentParagraph.translation = response.content;\n                this.render();\n            }\n            else {\n                throw new Error(response.error);\n            }\n        }\n        catch (error) {\n            section.textContent = `Error: ${error instanceof Error ? error.message : 'Failed to translate'}`;\n        }\n        finally {\n            section.classList.remove('loading');\n        }\n    }\n    async handleReadAloud() {\n        if (!this.currentParagraph)\n            return;\n        if (this.voiceService.isReading()) {\n            this.voiceService.stop();\n            this.render();\n            return;\n        }\n        try {\n            await this.voiceService.speak(this.currentParagraph.text);\n            this.render();\n        }\n        catch (error) {\n            console.error('Failed to read text:', error);\n        }\n    }\n    getOrCreateSection(id, title) {\n        let section = this.container.querySelector(`#${id}-section`);\n        if (!section) {\n            section = document.createElement('div');\n            section.id = `${id}-section`;\n            section.className = 'overlay-section';\n            section.innerHTML = `\n        <h3>${title}</h3>\n        <div class=\"overlay-section-content\"></div>\n      `;\n        }\n        return section.querySelector('.overlay-section-content');\n    }\n    render() {\n        if (!this.currentParagraph)\n            return;\n        this.container.innerHTML = `\n      <div class=\"overlay-header\">\n        <div class=\"overlay-actions\">\n          <button class=\"overlay-button\" id=\"summarize-btn\">Summarize</button>\n          <button class=\"overlay-button\" id=\"translate-btn\">Translate</button>\n          <button class=\"overlay-button ${this.voiceService.isReading() ? 'reading' : ''}\" id=\"read-btn\">\n            ${this.voiceService.isReading() ? 'Stop Reading' : 'Read Aloud'}\n          </button>\n        </div>\n      </div>\n      <div class=\"overlay-content\">\n        ${this.currentParagraph.summary ? `\n          <div class=\"overlay-section\">\n            <h3>Summary</h3>\n            <div class=\"overlay-section-content\">${this.currentParagraph.summary}</div>\n          </div>\n        ` : ''}\n        ${this.currentParagraph.translation ? `\n          <div class=\"overlay-section\">\n            <h3>Translation</h3>\n            <div class=\"overlay-section-content\">${this.currentParagraph.translation}</div>\n          </div>\n        ` : ''}\n      </div>\n    `;\n        // Add event listeners\n        this.container.querySelector('#summarize-btn')?.addEventListener('click', () => this.handleSummarize());\n        this.container.querySelector('#translate-btn')?.addEventListener('click', () => this.handleTranslate());\n        this.container.querySelector('#read-btn')?.addEventListener('click', () => this.handleReadAloud());\n    }\n    destroy() {\n        this.voiceService.stop();\n        this.hide();\n    }\n}\nclass ReadingAssistant {\n    constructor() {\n        this.paragraphs = [];\n        this.currentHighlightedId = null;\n        this.highlightColor = 'rgba(255, 255, 0, 0.2)';\n        // Initialize intersection observer for paragraph tracking\n        this.observer = new IntersectionObserver((entries) => this.handleIntersection(entries), {\n            root: null,\n            rootMargin: '0px',\n            threshold: 0.5, // Trigger when 50% of paragraph is visible\n        });\n        this.initialize();\n        this.overlay = new AIOverlay();\n    }\n    async initialize() {\n        await this.extractParagraphs();\n        this.setupScrollListener();\n        this.injectStyles();\n    }\n    async extractParagraphs() {\n        // Main content selectors - can be expanded based on common website layouts\n        const contentSelectors = [\n            'article',\n            '[role=\"main\"]',\n            '.main-content',\n            '#main-content',\n            'main',\n        ];\n        let mainContent = null;\n        // Find the main content container\n        for (const selector of contentSelectors) {\n            mainContent = document.querySelector(selector);\n            if (mainContent)\n                break;\n        }\n        // If no main content found, use body as fallback\n        const container = mainContent || document.body;\n        // Find all paragraph elements\n        const paragraphElements = container.querySelectorAll('p');\n        // Process each paragraph\n        paragraphElements.forEach((element, index) => {\n            const text = element.textContent?.trim();\n            if (text && text.length > 20) { // Filter out short paragraphs\n                // Create paragraph number indicator\n                const numberIndicator = document.createElement('span');\n                numberIndicator.className = 'reading-assistant-number';\n                numberIndicator.textContent = `[${index + 1}]`;\n                // Insert number before paragraph\n                element.insertBefore(numberIndicator, element.firstChild);\n                // Store paragraph data\n                this.paragraphs.push({\n                    id: index + 1,\n                    text,\n                    element: element,\n                });\n                // Observe paragraph for visibility\n                this.observer.observe(element);\n            }\n        });\n    }\n    handleIntersection(entries) {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                const element = entry.target;\n                const paragraphData = this.paragraphs.find(p => p.element === element);\n                if (paragraphData && this.currentHighlightedId !== paragraphData.id) {\n                    this.highlightParagraph(paragraphData.id);\n                }\n            }\n        });\n    }\n    highlightParagraph(id) {\n        // Remove previous highlight\n        if (this.currentHighlightedId) {\n            const prevParagraph = this.paragraphs.find(p => p.id === this.currentHighlightedId);\n            if (prevParagraph) {\n                prevParagraph.element.style.backgroundColor = '';\n                prevParagraph.element.style.transition = '';\n            }\n        }\n        // Add new highlight\n        const paragraph = this.paragraphs.find(p => p.id === id);\n        if (paragraph) {\n            paragraph.element.style.backgroundColor = this.highlightColor;\n            paragraph.element.style.transition = 'background-color 0.3s ease';\n            this.currentHighlightedId = id;\n            this.overlay.show(paragraph);\n        }\n    }\n    setupScrollListener() {\n        window.addEventListener('scroll', () => {\n            // Debounce scroll events\n            if (this.scrollTimeout) {\n                window.clearTimeout(this.scrollTimeout);\n            }\n            this.scrollTimeout = window.setTimeout(() => {\n                this.checkVisibleParagraphs();\n            }, 100);\n        });\n    }\n    checkVisibleParagraphs() {\n        // Find the paragraph most visible in the viewport\n        let maxVisibility = 0;\n        let mostVisibleId = null;\n        this.paragraphs.forEach(({ id, element }) => {\n            const rect = element.getBoundingClientRect();\n            const visibility = this.getVisibilityPercentage(rect);\n            if (visibility > maxVisibility) {\n                maxVisibility = visibility;\n                mostVisibleId = id;\n            }\n        });\n        if (mostVisibleId && mostVisibleId !== this.currentHighlightedId) {\n            this.highlightParagraph(mostVisibleId);\n        }\n    }\n    getVisibilityPercentage(rect) {\n        const windowHeight = window.innerHeight;\n        if (rect.top > windowHeight || rect.bottom < 0)\n            return 0;\n        const visibleHeight = Math.min(rect.bottom, windowHeight) - Math.max(rect.top, 0);\n        return (visibleHeight / rect.height) * 100;\n    }\n    injectStyles() {\n        const styles = `\n      .reading-assistant-number {\n        display: inline-block;\n        margin-right: 8px;\n        color: #666;\n        font-size: 0.9em;\n        font-weight: 500;\n        opacity: 0.8;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        .reading-assistant-number {\n          color: #999;\n        }\n      }\n    `;\n        const styleElement = document.createElement('style');\n        styleElement.textContent = styles;\n        document.head.appendChild(styleElement);\n    }\n    // Public methods for external control\n    setHighlightColor(color) {\n        this.highlightColor = color;\n        if (this.currentHighlightedId) {\n            this.highlightParagraph(this.currentHighlightedId);\n        }\n    }\n    // Add cleanup method\n    destroy() {\n        // Cleanup observers and listeners\n        this.observer.disconnect();\n        window.removeEventListener('scroll', this.setupScrollListener);\n        if (this.scrollTimeout) {\n            window.clearTimeout(this.scrollTimeout);\n        }\n        // Remove paragraph numbers and highlights\n        this.paragraphs.forEach(({ element }) => {\n            const numberIndicator = element.querySelector('.reading-assistant-number');\n            if (numberIndicator) {\n                numberIndicator.remove();\n            }\n            element.style.backgroundColor = '';\n            element.style.transition = '';\n        });\n        this.overlay.hide();\n    }\n    // Add method to get current paragraph\n    getCurrentParagraph() {\n        return this.currentHighlightedId\n            ? this.paragraphs.find(p => p.id === this.currentHighlightedId) || null\n            : null;\n    }\n    // Add method to get all paragraphs\n    getParagraphs() {\n        return [...this.paragraphs];\n    }\n    updateSettings(settings) {\n        if (settings.reading) {\n            if (settings.reading.highlightColor) {\n                this.setHighlightColor(settings.reading.highlightColor);\n            }\n            // Add other settings updates as needed\n        }\n    }\n}\n// Initialize the reading assistant\nconst readingAssistant = new ReadingAssistant();\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    switch (message.type) {\n        case 'SET_HIGHLIGHT_COLOR':\n            if (message.color) {\n                readingAssistant.setHighlightColor(message.color);\n            }\n            break;\n        case 'GET_CURRENT_PARAGRAPH':\n            const currentParagraph = readingAssistant.getCurrentParagraph();\n            sendResponse(currentParagraph);\n            break;\n        case 'GET_ALL_PARAGRAPHS':\n            const paragraphs = readingAssistant.getParagraphs();\n            sendResponse(paragraphs);\n            break;\n    }\n});\n// Add to your existing message listeners\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.type === 'SETTINGS_UPDATED') {\n        // Handle the settings update\n        readingAssistant.updateSettings(message.settings);\n    }\n    return true;\n});\n// Cleanup on extension unload\nwindow.addEventListener('unload', () => {\n    readingAssistant.destroy();\n});\n\n\n//# sourceURL=webpack://smart-reading-assistant/./src/content.ts?");

/***/ }),

/***/ "./src/services/VoiceService.ts":
/*!**************************************!*\
  !*** ./src/services/VoiceService.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VoiceService: () => (/* binding */ VoiceService)\n/* harmony export */ });\nclass VoiceService {\n    constructor() {\n        this.utterance = null;\n        this.voice = null;\n        this.isPlaying = false;\n        this.initialize();\n    }\n    async initialize() {\n        // Wait for voices to be loaded\n        if (speechSynthesis.getVoices().length === 0) {\n            await new Promise(resolve => {\n                speechSynthesis.addEventListener('voiceschanged', () => resolve(), { once: true });\n            });\n        }\n        // Select default voice\n        const voices = speechSynthesis.getVoices();\n        this.voice = voices.find(v => v.default) || voices[0];\n    }\n    async speak(text, language = 'en-US') {\n        if (this.isPlaying) {\n            this.stop();\n        }\n        this.utterance = new SpeechSynthesisUtterance(text);\n        this.utterance.voice = this.voice;\n        this.utterance.lang = language;\n        this.utterance.rate = 1;\n        this.utterance.pitch = 1;\n        return new Promise((resolve, reject) => {\n            if (!this.utterance)\n                return reject(new Error('Speech synthesis not initialized'));\n            this.utterance.onend = () => {\n                this.isPlaying = false;\n                resolve();\n            };\n            this.utterance.onerror = (event) => {\n                this.isPlaying = false;\n                reject(new Error(`Speech synthesis error: ${event.error}`));\n            };\n            this.isPlaying = true;\n            speechSynthesis.speak(this.utterance);\n        });\n    }\n    stop() {\n        if (this.isPlaying) {\n            speechSynthesis.cancel();\n            this.isPlaying = false;\n        }\n    }\n    setVoice(voiceName) {\n        const voices = speechSynthesis.getVoices();\n        const newVoice = voices.find(v => v.name === voiceName);\n        if (newVoice) {\n            this.voice = newVoice;\n        }\n    }\n    getAvailableVoices() {\n        return speechSynthesis.getVoices();\n    }\n    isReading() {\n        return this.isPlaying;\n    }\n}\n\n\n//# sourceURL=webpack://smart-reading-assistant/./src/services/VoiceService.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_require__("./src/content.ts");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/content.css");
/******/ 	
/******/ })()
;