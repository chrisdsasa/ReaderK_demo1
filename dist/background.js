/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/background.ts":
/*!***************************!*\
  !*** ./src/background.ts ***!
  \***************************/
/***/ (() => {

eval("\nclass OpenAIService {\n    constructor() {\n        this.config = {\n            apiKey: '',\n            model: 'gpt-3.5-turbo',\n            maxTokens: 150\n        };\n    }\n    async initialize() {\n        const stored = await chrome.storage.sync.get(['openAIConfig']);\n        if (stored.openAIConfig) {\n            this.config = { ...this.config, ...stored.openAIConfig };\n        }\n    }\n    async summarizeParagraph(text) {\n        if (!this.config.apiKey) {\n            return {\n                success: false,\n                error: 'OpenAI API key not configured'\n            };\n        }\n        try {\n            const response = await fetch('https://api.openai.com/v1/chat/completions', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${this.config.apiKey}`\n                },\n                body: JSON.stringify({\n                    model: this.config.model,\n                    messages: [\n                        {\n                            role: 'system',\n                            content: 'You are a concise summarizer. Provide brief, clear summaries.'\n                        },\n                        {\n                            role: 'user',\n                            content: `Summarize this text in 1-2 sentences: ${text}`\n                        }\n                    ],\n                    max_tokens: this.config.maxTokens,\n                    temperature: 0.3\n                })\n            });\n            if (!response.ok) {\n                const error = await response.json();\n                throw new Error(error.error?.message || 'API request failed');\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                content: data.choices[0].message.content.trim()\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error occurred'\n            };\n        }\n    }\n    async translateParagraph(text, targetLanguage) {\n        if (!this.config.apiKey) {\n            return {\n                success: false,\n                error: 'OpenAI API key not configured'\n            };\n        }\n        try {\n            const response = await fetch('https://api.openai.com/v1/chat/completions', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${this.config.apiKey}`\n                },\n                body: JSON.stringify({\n                    model: this.config.model,\n                    messages: [\n                        {\n                            role: 'system',\n                            content: `You are a translator. Translate text to ${targetLanguage} maintaining the original meaning and tone.`\n                        },\n                        {\n                            role: 'user',\n                            content: text\n                        }\n                    ],\n                    max_tokens: this.config.maxTokens * 2,\n                    temperature: 0.3\n                })\n            });\n            if (!response.ok) {\n                const error = await response.json();\n                throw new Error(error.error?.message || 'API request failed');\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                content: data.choices[0].message.content.trim()\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error occurred'\n            };\n        }\n    }\n    async updateConfig(newConfig) {\n        this.config = { ...this.config, ...newConfig };\n        await chrome.storage.sync.set({\n            openAIConfig: this.config\n        });\n    }\n}\n// Initialize OpenAI service\nconst openAIService = new OpenAIService();\nopenAIService.initialize();\n// Handle messages from content script and popup\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    // Use async response pattern\n    const handleMessage = async () => {\n        switch (message.type) {\n            case 'SUMMARIZE_PARAGRAPH':\n                if (message.text) {\n                    return await openAIService.summarizeParagraph(message.text);\n                }\n                break;\n            case 'TRANSLATE_PARAGRAPH':\n                if (message.text && message.targetLanguage) {\n                    return await openAIService.translateParagraph(message.text, message.targetLanguage);\n                }\n                break;\n            case 'UPDATE_OPENAI_CONFIG':\n                if (message.config) {\n                    await openAIService.updateConfig(message.config);\n                    return { success: true };\n                }\n                break;\n        }\n        return { success: false, error: 'Invalid request' };\n    };\n    // Keep message channel open for async response\n    handleMessage().then(sendResponse);\n    return true;\n});\n// Add this to your existing listeners\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.type === 'BROADCAST_SETTINGS' && message.targetTabId) {\n        chrome.tabs.sendMessage(message.targetTabId, {\n            type: 'SETTINGS_UPDATED',\n            settings: message.settings\n        });\n    }\n    return true;\n});\n\n\n//# sourceURL=webpack://smart-reading-assistant/./src/background.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/background.ts"]();
/******/ 	
/******/ })()
;